{"alert_action_builder": {"modular_alerts": [{"description": "Send events to Rapid7 InsightConnect", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADW0lEQVRYhe3Tb0gbZxzA8d81JHfoXXLRnPl3uSiK5+mhOWOS2pqLEl1cZkpLI2VBCnJhWsTqnOvmXmzZVjZYHaNuY/NFRZiOMewfWtirDbbWtgzd1nkM1IsZ2q0spe/sWjbwnr1x4t5u0L25D/zggR88fF88D4DBYDAYDAbDk6dpGu73+7+gKEqlKEr1eDxL7e3tJ/7eZ7PZgwzDfO/z+VY0TbMCAPT19dU4nc47FEWpdrtdrauru5pMJl1dXV3H7Hb7ysLCQgPP81dsNptaXl6u1tfXz708NibdfXfgg/ypmJo/FVO13SlMHFsszuQO7QUpiuKnKGrb4XBcFgThpMfj+Y5hmI3V1VUKAKCqqkolSVLHMAwpiiIDAITD4aMYhqFAIPBeIBB4jSCIhzzPv9TQ0PA+wzD3c7mcy2q1PhBF8WtRFE8TBLHt9XpvFW9calrPHtQLL6bOFYbj6cJwPF04c+TaxshThb2gZDLZZTab9VAoNNvR0ZFxuVwrLMveQQiZE4nESYvFshOPx8+bzWY9GAwOAwBIkjSJYRjq6ekZkWX5bElJyeNEIvEKx3E3Kisrv0qn04cIgtBTqdRxAIBYLHaJIIhib28vUxhJ7GydP/3Rb7OvKwAAG2PJpfX+MNoLCoVCb+I4jnw+3w6GYYjjuCVZlqW5uTkrTdNbXq93lef5QYIgHtbW1n4GAMBx3DdWq1WvqanZ4TjugSAIFzKZTNjhcDySJOntlpaWUZvNtj00NOQHAKiurl4sKyvbvHXtc6/23GF9rT+MNnMnXr3/6Tvd69mI/o8gQRBuu93u5ampKaa0tPSP5ubmaYTQgUgk8pbFYvkTx/EijuNFk8n0mGXZ9fn5eT9N03cjkcj0/rfY2dmZwTAMybJ8pKmp6SpN0/fa2tqelSRp1mQy6ZIkTW5NDgyu9YeRNnD40b3pibqfz6Qur/WHUX7s6V/3LmJZ9kdRFM/uxn3IsuyXo6OjzU6n89vGxsaJaDTKRKNRRhTFcx6PZ0VRlO6Kioof4vF4z/6g1tbWcZIk1ZmZGZ8gCMskSaokSaput3s5GAyO/LQwHcmPP3NTG5TVzTf6Pvn9+kV3/oXkzY3nuxd/+Xi89V/8x/8GIWTad8Z258ATDzEYDAaDwfA/+gv3iRvXGSpl8AAAAABJRU5ErkJggg==", "label": "Send to InsightConnect", "short_name": "send_to_insightconnect", "parameters": [{"format_type": "text", "required": true, "name": "workflow_trigger_url", "label": "Workflow Trigger URL", "default_value": "https://<REGION>.api.insight.rapid7.com/connect/v1/workflows/<IDENTIFIER>/events/execute", "help_string": "Workflow API trigger URL to receive the Splunk alert.", "type": "", "value": "https://us.api.insight.rapid7.com/connect/v1/workflows/aac27018-c5f4-4c73-8ac9-742ff08cb37f/events/execute"}], "code": "# encoding = utf-8\n\nimport json\nimport re\n\nimport requests\n\n\nclass SendToInsightConnectAlert:\n    \"\"\" Sends an alert to InsightConnect \"\"\"\n\n    def __init__(self, trigger_url, api_key, event, helper):\n        \"\"\"\n        Initialize a SendToInsightConnectAlert\n        :param trigger_url: API Trigger URL for workflow within Rapid7 InsightConnect\n        :param api_key: X-API-Key for Insight platform\n        :param event: Splunk event being alerted on\n        \"\"\"\n        self.trigger_url = trigger_url\n        self.api_key = api_key\n        self.event = event\n        self.helper = helper\n\n    @classmethod\n    def from_cli(cls, helper):\n        \"\"\"\n        Initializes a SendToInsightConnectAlert object from CLI via stdin\n        :return: SendToInsightConnectAlert instance\n        \"\"\"\n\n        try:\n            api_key = helper.get_global_setting(\"rapid7_insight_api_key\")\n            trigger_url = helper.get_param(\"workflow_trigger_url\")\n            j_event = cls._create_payload(helper=helper)\n\n        except KeyError:\n            raise Exception(\"Error: Either 'trigger URL' or 'x-api-key' was missing!\")\n        except ValueError:\n            raise Exception(\"Error: An invalid JSON string was received!\")\n\n        return cls(trigger_url=trigger_url, api_key=api_key, event=j_event, helper=helper)\n\n    def run(self):\n        \"\"\"\n        Runs the Alert action\n        :return: None\n        \"\"\"\n\n        if not self.trigger_url:\n            s = \"Error: Missing Rapid7 InsightConnect Workflow API trigger URL!\"\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        if not self._is_workflow_trigger_url_valid(trigger_url=self.trigger_url):\n            s = \"Error: Invalid Rapid7 InsightConnect Workflow API trigger URL!\"\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        if not self.api_key:\n            s = \"Error: Missing Rapid7 Insight platform API key! If you need an API key, one can be created at \" \\\n                \"https://insight.rapid7.com/platform#/apiKeyManagement\"\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        # Both required inputs are present and valid, so proceed with the alert\n        self.helper.log_info(\"Sending alert to Rapid7 InsightConnect!\")\n\n        self._send_alert(url=self.trigger_url,\n                         api_key=self.api_key,\n                         alert=self.event)\n\n    @staticmethod\n    def _create_payload(helper):\n        \"\"\"\n        Creates a payload to send to Rapid7 InsightConnect\n        :param helper: Splunk helper\n        :return: Payload\n        \"\"\"\n        return json.dumps({\"events\": [dict(event) for event in helper.get_events()]})\n\n\n    def _is_workflow_trigger_url_valid(self, trigger_url):\n        \"\"\"\n        Checks if a Rapid7 InsightConnect workflow trigger URL is valid based on a known schema as of 10/10/19\n        :param trigger_url: Workflow trigger URL to validate\n        :return: Boolean value indicating if the URL is valid (true) or invalid (false)\n        \"\"\"\n\n        # Regex pattern, matches something like:\n        # https://us.api.insight.rapid7.com/connect/v1/workflows/16b3-z81b-40b7-afc2-zf53127d3758/events/execute\n        rp = r\"https:\\/\\/.{2}\\.api\\.insight\\.rapid7\\.com\\/connect\\/v\\d{1}\\/workflows\\/[a-zA-Z0-9\\-]*\\/events\\/execute\"\n        matches = re.match(rp, trigger_url)\n\n        if matches:\n            return True\n        else:\n            return False\n\n    def _send_alert(self, url, api_key, alert):\n        \"\"\"\n        Sends a Splunk alert to Rapid7 InsightConnect\n        :param url: Rapid7 InsightConnect Workflow URL\n        :param api_key: Rapid7 Insight platform API Key (used for the X-Api-Key POST header)\n        :param alert: The Splunk alert to send\n        :return: None\n        \"\"\"\n\n        # URL will always be HTTPS as that is the only option with the Rapid7 Insight platform\n        # and regex validation is performed to ensure the URL schema is proper.\n        response = requests.post(url, alert, headers={\"X-Api-Key\": api_key})\n\n        # Documented Rapid7 InsightConnect API status codes\n        if response.status_code != 200:\n            s = \"An error occurred! Response was: %s\" % response.text\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        self.helper.log_info(\"Successfully sent alert to Rapid7 InsightConnect!\")\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    rapid7_insight_api_key = helper.get_global_setting(\"rapid7_insight_api_key\")\n    helper.log_info(\"rapid7_insight_api_key={}\".format(rapid7_insight_api_key))\n\n    # The following example gets the alert action parameters and prints them to the log\n    workflow_trigger_url = helper.get_param(\"workflow_trigger_url\")\n    helper.log_info(\"workflow_trigger_url={}\".format(workflow_trigger_url))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action send_to_rapid7_insightconnect started.\")\n\n    try:\n        modular_alert = SendToInsightConnectAlert.from_cli(helper=helper)\n        modular_alert.run()\n        return 0\n    except Exception as e:\n        raise Exception(\"An error occurred while running the alert. Information about the error: %s\" % str(e))\n", "uuid": "2508e5c86d494047ae19c3c6313d8cbe"}]}, "basic_builder": {"appname": "rapid7_insightconnect", "friendly_name": "Rapid7 InsightConnect App for Splunk", "version": "2.0.0", "author": "Rapid7_Integrations", "description": "Rapid7 InsightConnect", "theme": "#e45e25", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACpUlEQVRYhe3Y/0sTYRwH8Gf/lBoh/dAvBeVvRoSLcpH5g1BRP/UFV1AaFAVR6cxy4i6ntC+1rW0wheZIGQ0qqH2prVnTfXOzbG4+u3v3g/Pa0d1uxuEM9oHPb597Pq+7e+7huYcQQlQ6vVHzzOIIOzxe1jk7h51Mh8fLMmZ7cHjCqCaEqIhOb9TMv31HKS2jUUFpGT5/gA7ppzrJpMURbiSmGsWY7WHi8HjZRmO2wuL0sMQ5O9doBx9W1wyaoFrRBMnF/wniWBbfH13C5wuH6s+LhxHTqrGsv4n1r5+UBQEAzaUQOXcQwZMt209NG5KTd8FtlJQDAUDm5ei/gSq5NHYDHFd7Dd4WqFz4iVDvPr5B6Ew7svYxrLgZycxYdQieauOvWXvvUw4EAPHbffzg0StHAY6rWb+64BI8pVh/F7gyVQ6UNNzhB0+M9MvWL947L3x13a0oJr4oB8pYR/jB088fYCOT+JO5lKC2lFoUnUur868UBJl1VXe7ecdbuTw+IKjN2p6KglZcBuVAy+ODkl/ReuwjX8eWCohePSYOcjPKgeK3ekWbRC8fEUzwtQ8+SfiPBbcyILZYEHz21ZmfeyGoXRq9JrFI7kEpGVcGlJudFm0S7tuP8lqer6P5DCJnD4jWxgd7wLHS2+W6QRyliPV3iTZJPNYK4TPi8GB3K36FAjX71A3KuhmJJi1/rSvxgR5RTNr0ULZPXaDitwhCPe2ioJj2uKC2lIxvLgNVNaHTe5F16MGx8v8SsiC6mkVUq5bcZuS9wsmcsT2pbD86ELt+Aqnp+6C5tCykbtBORxMkF02QXOxO0K47bGBMttBuOY4xmGxBMjxhVPv8gYYfWL1+46fD48YOQghRDemnOhmzPWxxelirawY7mRanhzWYbMEKRvUb5+B3C59xFVoAAAAASUVORK5CYII=", "visible": false, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 2}, "global_settings_builder": {"global_settings": {"credential_settings": [], "customized_settings": [{"format_type": "password", "required": true, "name": "rapid7_insight_api_key", "label": "Rapid7 Insight API Key", "default_value": "", "help_string": "Rapid7 Insight platform API key. These can be created at https://insight.rapid7.com/platform#/apiKeyManagement.", "internal_name": "", "type": "password", "value": ""}]}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1598899534_50", "progress": 1.0}}