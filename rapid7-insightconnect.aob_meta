{"alert_action_builder": {"modular_alerts": [{"description": "Send events to Rapid7 InsightConnect", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAEXElEQVRYhe3U/28TZQDH8YewkOt1pXf07rnr02t71z59rs31zqPt1pV226Eb6GaH1ZSAaNycgMCEbQyJXwiHEkgkiCgIiBKDEkBAxvwWkmXRRE0IMjUKJOttLeOL/hn+Iv+E3usveP/y+QDgcrlcLpfrf6BarS5ECHE0TQdpmkYQQsEwDC8AYAEAAFiWRUEIBUVRBMuymgAAQNO0RRBCgaZpxHFckBDCaZq2yDAMryiKfLlcpgkhHE3TQY7jgslkMjBSrXru7H+WbQy3B+eHutH8UDdqDLcHnbEKrNs29bBnQaFQCCGEjjAMM84wzAWE0BnTNNdZltVsWRZVLBZ7IIQXRFE829fXh23bXpTJZLI8z59lWfYKz/OXFEU5ksvlWjOZzGpBED6qVCrdGOMPOI6bEAThC4zxoYFKz6qZfQOvzr7y2ISzZfm4s7nzvDO0/Nzczqc+vruvv6du2xSwLKvJNM0WhmGuQwgvy7JsB4PB7xFCE11dXTFd12PhcHiCZdm/PB5Pva2trVwqlViM8XMURd3GGJ+Kx+PH/H7/rxhjmxByFCE0ZZrmKp7nf8YYX1EUZW8gEPhFiUYuXh5d0+9s7vxjbnvPyfnRJzbVt3ZtqO/o/dIZWTneGF4ZBJZlUbquV30+Xw1jfFlV1bcQQj+Ew+HzHR0dqVQqtYll2ZsY43Gv1ztHCBnRNC2CMd7v8Xgapmke1XX9BMdxv2UymXdkWf5OUZSLhmEM+v3+adM0X8rlcmlN086xLPvjm73FvtnhlX823l535v7hkYEHe9fkZrd1T9bWF27eGlwaBaZpMslkco/P57uHEKp5vd47kiRd1XW9J5vN5gOBwBSE8PdQKHS8ubnZiUajJwkhj0iSdCkQCDyIx+PTiqJMJhKJQ7lc7kUI4Y1UKvVeOp3eu2TJkmutra2P6rquR6PRr5AoTn34/ONV5+X2xszG9vl79urX7+7rX1/bWJyvDbbV5gaXRUE6nRYIIedCodDXiURiLcMw1wkhJ/L5vKFp2i6fz3fL4/HcoCjqJ5qmG5IkTXV2dpYFQZhMpVJHVFU1QqGQ1NLSEjYMY9Dr9U6n0+ltmqad5TjuhqqqOwkhRxmGmV62NP3+tdGnd8+sL96vbeq4dWfX2tX1sfKntQ3Fv52t3ZPzQ90ICIIAI5HIsUQiMabreiwWi+2OxWLvWpbVFYlEDiuKskMUxVZBEPKyLO+JRCKnS6XSWkmSTuRyuVWFQsHz7xKbdV0fYBjmVKlU6lJV9ZTf7/+WYZgLkiR9rmnJ0U9GX+ib2f7kMWfL8m8abzxz8N6BLYXZsd7jsyMrPmvsWdNbt/spAABYKIoiH4vF/ACAJlmWGUIIVy6XaVEUeYzxYgBAk2VZTbIsM/F4HBaLRZ8oinw2m6UfXgMAYIGqqj5RFPlCoeCJx+OQpmlE0zTieV7M5/OLr54+4HXGKrCxoT14+7VKoG73U45dgc7YCvgwxuVyuVwu13/dP4aiM7LK14IrAAAAAElFTkSuQmCC", "label": "Send to InsightConnect", "short_name": "send_to_insightconnect", "parameters": [{"format_type": "text", "required": true, "name": "workflow_trigger_url", "label": "Workflow Trigger URL", "default_value": "", "help_string": "Workflow API trigger URL to receive the Splunk alert.", "type": "", "value": "https://us.api.insight.rapid7.com/connect/v1/workflows/e97b6ac7-fe48-43d4-818b-8ddb8658cc54/events/execute"}], "code": "# encoding = utf-8\n\nimport json\nimport re\n\nimport requests\n\n\nclass SendToInsightConnectAlert:\n    \"\"\" Sends an alert to InsightConnect \"\"\"\n\n    def __init__(self, trigger_url, api_key, event, helper):\n        \"\"\"\n        Initialize a SendToInsightConnectAlert\n        :param trigger_url: API Trigger URL for workflow within Rapid7 InsightConnect\n        :param api_key: X-API-Key for Insight platform\n        :param event: Splunk event being alerted on\n        \"\"\"\n        self.trigger_url = trigger_url\n        self.api_key = api_key\n        self.event = event\n        self.helper = helper\n\n    @classmethod\n    def from_cli(cls, helper):\n        \"\"\"\n        Initializes a SendToInsightConnectAlert object from CLI via stdin\n        :return: SendToInsightConnectAlert instance\n        \"\"\"\n\n        try:\n            api_key = helper.get_global_setting(\"rapid7_insight_api_key\")\n            trigger_url = helper.get_param(\"workflow_trigger_url\")\n            j_event = cls._create_payload(helper=helper)\n\n        except KeyError:\n            raise Exception(\"Error: Either 'trigger URL' or 'x-api-key' was missing!\")\n        except ValueError:\n            raise Exception(\"Error: An invalid JSON string was received!\")\n\n        return cls(trigger_url=trigger_url, api_key=api_key, event=j_event, helper=helper)\n\n    def run(self):\n        \"\"\"\n        Runs the Alert action\n        :return: None\n        \"\"\"\n\n        if not self.trigger_url:\n            s = \"Error: Missing Rapid7 InsightConnect Workflow API trigger URL!\"\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        if not self._is_workflow_trigger_url_valid(trigger_url=self.trigger_url):\n            s = \"Error: Invalid Rapid7 InsightConnect Workflow API trigger URL!\"\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        if not self.api_key:\n            s = \"Error: Missing Rapid7 Insight platform API key! If you need an API key, one can be created at \" \\\n                \"https://insight.rapid7.com/platform#/apiKeyManagement\"\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        # Both required inputs are present and valid, so proceed with the alert\n        self.helper.log_info(\"Sending alert to Rapid7 InsightConnect!\")\n\n        self._send_alert(url=self.trigger_url,\n                         api_key=self.api_key,\n                         alert=self.event)\n\n    @staticmethod\n    def _create_payload(helper):\n        \"\"\"\n        Creates a payload to send to Rapid7 InsightConnect\n        :param helper: Splunk helper\n        :return: Payload\n        \"\"\"\n        return json.dumps({\"events\": [dict(event) for event in helper.get_events()]})\n\n\n    def _is_workflow_trigger_url_valid(self, trigger_url):\n        \"\"\"\n        Checks if a Rapid7 InsightConnect workflow trigger URL is valid based on a known schema as of 10/10/19\n        :param trigger_url: Workflow trigger URL to validate\n        :return: Boolean value indicating if the URL is valid (true) or invalid (false)\n        \"\"\"\n\n        # Regex pattern, matches something like:\n        # https://us.api.insight.rapid7.com/connect/v1/workflows/16b3-z81b-40b7-afc2-zf53127d3758/events/execute\n        rp = r\"https:\\/\\/.{2}\\.api\\.insight\\.rapid7\\.com\\/connect\\/v\\d{1}\\/workflows\\/[a-zA-Z0-9\\-]*\\/events\\/execute\"\n        matches = re.match(rp, trigger_url)\n\n        if matches:\n            return True\n        else:\n            return False\n\n    def _send_alert(self, url, api_key, alert):\n        \"\"\"\n        Sends a Splunk alert to Rapid7 InsightConnect\n        :param url: Rapid7 InsightConnect Workflow URL\n        :param api_key: Rapid7 Insight platform API Key (used for the X-Api-Key POST header)\n        :param alert: The Splunk alert to send\n        :return: None\n        \"\"\"\n\n        # URL will always be HTTPS as that is the only option with the Rapid7 Insight platform\n        # and regex validation is performed to ensure the URL schema is proper.\n        response = requests.post(url, alert, headers={\"X-Api-Key\": api_key})\n\n        # Documented Rapid7 InsightConnect API status codes\n        if response.status_code != 200:\n            s = \"An error occurred! Response was: %s\" % response.text\n            self.helper.log_error(s)\n            raise Exception(s)\n\n        self.helper.log_info(\"Successfully sent alert to Rapid7 InsightConnect!\")\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    rapid7_insight_api_key = helper.get_global_setting(\"rapid7_insight_api_key\")\n    helper.log_info(\"rapid7_insight_api_key={}\".format(rapid7_insight_api_key))\n\n    # The following example gets the alert action parameters and prints them to the log\n    workflow_trigger_url = helper.get_param(\"workflow_trigger_url\")\n    helper.log_info(\"workflow_trigger_url={}\".format(workflow_trigger_url))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action send_to_rapid7_insightconnect started.\")\n\n    try:\n        modular_alert = SendToInsightConnectAlert.from_cli(helper=helper)\n        modular_alert.run()\n        return 0\n    except Exception as e:\n        raise Exception(\"An error occurred while running the alert. Information about the error: %s\" % str(e))\n", "uuid": "410116030f7d4e7b86e108053682a3ac"}]}, "basic_builder": {"appname": "rapid7-insightconnect", "friendly_name": "Rapid7 InsightConnect App for Splunk", "version": "2.0.1", "author": "Rapid7_Integrations", "description": "Rapid7 InsightConnect", "theme": "#f55300", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACpUlEQVRYhe3Y/08SYRwH8Id/Sm3N9UO/1Fb+ZmtNWknL/MGtWv3Ul0ltpW212lolmCZObvglkAL5sqFbwIazctVWgAVhISAIlCn4cPfuB/Xi1h2H7Sa28dk+v33u+bzu7rlnzz2EEKLSG0Y1psmpsMPjZZ0zPuxmOjxelrHYg7qRCTUhREX0hlFN4M07SmkJtQpKS/DPzdM+w1grMU1OhWuJKUcxFnuYODxettaY7bA6PSxxzvhq7eDD6ppGHVQp6iC5+D9BHMvi+5Mr+HzpSPV5+SiiWjUShttY//pJWRAA0GwKCxcOI3i6YeepaULSdB/cRlE5EACkXw78G2grl4ZugeMqr8E7ApXWfiLUeYBvEDrXjIx9CCtuRjLTVj2CZ5r4a1bf+5UDAUDsbhc/eOTacYDjKtbnZ12CpxTtbgNXosqBksZ7/ODx/m7Z+sUHF4Wvrr0RhfgX5UBpaz8/+PLzR9hIx/9kNiWoLaYWRedSPuBQEGTRl93t5h1vZ2K4R1CbsT0TBa24jMqBEsO9kl/RevQjX8cW1xC5fkIc5GaUA8XudIo2iVw9Jpjgqx/8kvAfs25lQGxhTfDZl2fO90JQuzRwQ2KR3IdiMqYMKDszLtok3HUQpdUcX0dzaSycPyRaG+vtAMdKb5erBnGUItrdJtok/lQrhE+Lw4PtjfgVeluxT9WgjJuRaNLw17oS6+kQxSybH8v2qQpU+LaAUEezKCiqPSmoLSZjm8tAWU3o7H5kpgzgWPl/CVkQzWcQ0aoltxk5r3Ayp22DW9uPFkRvnkJq/CFodlkWUjVot6MOkos6SC72JmjPHTYwZltorxzHGM22INGNTKj9c/M1P7B6FXhNdcxECyGEqPoMY62MxR62Oj2s1TWNXU2nhzWabcEtjOo3ppd3LLbBiVcAAAAASUVORK5CYII=", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 1}, "global_settings_builder": {"global_settings": {"credential_settings": [], "customized_settings": [{"format_type": "password", "required": true, "name": "rapid7_insight_api_key", "label": "API Key", "default_value": "", "help_string": "", "internal_name": "", "type": "password", "value": ""}]}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1601672020_43", "progress": 1.0}}